summary(leverageP)
#soglia
p<-length(model_box_selection$coefficients)+1
n<-length(model_box_selection$residuals)
leverage_treshold<-2*p/n
plot(leverageP,
main="Punti di leva piano Processo chimico",
ylab="Punti di leva hii",
xlab="indice unit?",
col ="blue")
abline(h=leverage_treshold,
col="red")
require(faraway)
halfnorm(leverageP,
ylab="coeff. di leva normalizzati")
cooksd <- cooks.distance(model_box_selection)
cook_treshold <- 4/(length(model_box_selection$residuals)-length(model_box_selection$coefficients)-1)
plot(model_box_selection, which=4, cook.levels=cook_treshold)
abline(h=cook_treshold, col="red")
halfnorm(cooksd)
model_box_selection$residuals[44]
mean(dataCar$horsepower)
dataCar[44,]
model_box_selection$residuals[129]
cook_treshold <- 4/(length(model_box_selection$residuals)-length(model_box_selection$coefficients)-1)
plot(model_box_selection, which=4, cook.levels=cook_treshold)
abline(h=cook_treshold, col="red")
halfnorm(cooksd)
model_box_selection$residuals[129]
mean(dataCar$horsepower)
dataCar[129,]
cook_treshold <- 4/(length(model_box_selection$residuals)-length(model_box_selection$coefficients)-1)
plot(model_box_selection, which=4, cook.levels=cook_treshold)
abline(h=cook_treshold, col="red")
halfnorm(cooksd)
model_box_selection$residuals[129]
mean(dataCar$horsepower)
dataCar[129,]
desc(dataCar)
cook_treshold <- 4/(length(model_box_selection$residuals)-length(model_box_selection$coefficients)-1)
plot(model_box_selection, which=4, cook.levels=cook_treshold)
abline(h=cook_treshold, col="red")
halfnorm(cooksd)
model_box_selection$residuals[129]
mean(dataCar$horsepower)
dataCar[129,]
str(dataCar)
cook_treshold <- 4/(length(model_box_selection$residuals)-length(model_box_selection$coefficients)-1)
plot(model_box_selection, which=4, cook.levels=cook_treshold)
abline(h=cook_treshold, col="red")
halfnorm(cooksd)
model_box_selection$residuals[129]
mean(dataCar$horsepower)
dataCar[129,]
str(dataCar)
summary(dataCar)
cook_treshold <- 4/(length(model_box_selection$residuals)-length(model_box_selection$coefficients)-1)
plot(model_box_selection, which=4, cook.levels=cook_treshold)
abline(h=cook_treshold, col="red")
halfnorm(cooksd)
model_box_selection$residuals[129]
mean(dataCar$horsepower)
dataCar[129,]
summary(dataCar)
cook_treshold <- 4/(length(model_box_selection$residuals)-length(model_box_selection$coefficients)-1)
plot(model_box_selection, which=4, cook.levels=cook_treshold)
abline(h=cook_treshold, col="red")
halfnorm(cooksd)
model_box_selection$residuals[3]
mean(dataCar$horsepower)
dataCar[3,]
summary(dataCar)
library(car)
influencePlot(Robust_ModSel,  main="Influence Plot" )
install.packages('car')
install.packages("car")
library(car)
influencePlot(Robust_ModSel,  main="Influence Plot" )
library(car)
influencePlot(model_box_selection,  main="Influence Plot" )
Influenti <- as.numeric(names(cooksd)[(cooksd < cook_treshold)])
dataCarNoInflu=data.frame(dataCar[cooksd <  cook_treshold, ])
model_No_Influ <- lm(((price^teta)/teta)~., data=dataCarNoInflu)
summary(model_No_Influ)$adj.r.squared
par(mfrow=c(2,2))
plot(model_No_Influ)
par(mfrow=c(1,1))
#Togliamo ora i punti Maggiormente influenti ed i punti di leva
dataCar=data.frame(dataCar[(cooksd <  cook_treshold) || (leverageP < leverage_treshold), ])
#Togliamo ora i punti Maggiormente influenti ed i punti di leva
dataCar=data.frame(dataCar[(cooksd <  cook_treshold) || (leverageP < leverage_treshold), ])
#Ristimiamo ora il modello privo di valori Influenti e di Leverage Point
model_No_Influ <- lm(((price^teta)/teta)~., data=dataCar)
summary(RobustFree)
#Togliamo ora i punti Maggiormente influenti ed i punti di leva
dataCar=data.frame(dataCar[(cooksd <  cook_treshold) || (leverageP < leverage_treshold), ])
#Ristimiamo ora il modello privo di valori Influenti e di Leverage Point
model_No_Influ <- lm(((price^teta)/teta)~., data=dataCar)
summary(model_No_Influ)
par(mfrow=c(2,2))
plot(model_No_Influ)
par(mfrow=c(1,1))
plot(model_No_Influ)
plot(model_box_selection)
#Togliamo ora i punti Maggiormente influenti ed i punti di leva
dataCar=data.frame(dataCar[(cooksd <  cook_treshold) || (leverageP < leverage_treshold), ])
#Ristimiamo ora il modello privo di valori Influenti e di Leverage Point
model_No_Influ <- lm(((price^teta)/teta)~., data=dataCar)
summary(model_No_Influ)
par(mfrow=c(2,2))
plot(model_box_selection)
plot(model_No_Influ)
par(mfrow=c(1,1))
plot(model_box_selection)
plot(model_No_Influ)
#Togliamo ora i punti Maggiormente influenti ed i punti di leva
dataCarNoInfluNoLev=data.frame(dataCar[(cooksd <  cook_treshold) || (leverageP < leverage_treshold), ])
#Ristimiamo ora il modello privo di valori Influenti e di Leverage Point
model_No_Influ <- lm(((price^teta)/teta)~., data=dataCarNoInfluNoLev)
summary(model_No_Influ)
par(mfrow=c(2,2))
plot(model_box_selection)
plot(model_No_Influ)
par(mfrow=c(1,1))
load("~/Downloads/car_environmentLast.RData")
names(dataCar)
dataCar <- dataCar[,-c(2,5,7,13)]
model_box_selection <- lm((price^teta)/teta~.,dataCar)
leverageP<-hatvalues(model_box_selection)
summary(leverageP)
#soglia
p<-length(model_box_selection$coefficients)+1
n<-length(model_box_selection$residuals)
leverage_treshold<-2*p/n
plot(leverageP,
main="Punti di leva piano Processo chimico",
ylab="Punti di leva hii",
xlab="indice unit?",
col ="blue")
abline(h=leverage_treshold,
col="red")
require(faraway)
halfnorm(leverageP,
ylab="coeff. di leva normalizzati")
cooksd <- cooks.distance(model_box_selection)
cook_treshold <- 4/(length(model_box_selection$residuals)-length(model_box_selection$coefficients)-1)
plot(model_box_selection, which=4, cook.levels=cook_treshold)
abline(h=cook_treshold, col="red")
halfnorm(cooksd)
model_box_selection$residuals[3]
mean(dataCar$horsepower)
dataCar[3,]
summary(dataCar)
library(car)
influencePlot(model_box_selection,  main="Influence Plot" )
Influenti <- as.numeric(names(cooksd)[(cooksd < cook_treshold)])
dataCarNoInflu=data.frame(dataCar[cooksd <  cook_treshold, ])
model_No_Influ <- lm(((price^teta)/teta)~., data=dataCarNoInflu)
summary(model_No_Influ)$adj.r.squared
par(mfrow=c(2,2))
plot(model_No_Influ)
par(mfrow=c(1,1))
#Togliamo ora i punti Maggiormente influenti ed i punti di leva
dataCarNoInfluNoLev=data.frame(dataCar[(cooksd <  cook_treshold) || (leverageP < leverage_treshold), ])
#Ristimiamo ora il modello privo di valori Influenti e di Leverage Point
model_No_Influ <- lm(((price^teta)/teta)~., data=dataCarNoInfluNoLev)
summary(model_No_Influ)
par(mfrow=c(2,2))
plot(model_box_selection)
plot(model_No_Influ)
par(mfrow=c(1,1))
#Togliamo ora i punti Maggiormente influenti ed i punti di leva
dataCarNoInfluNoLev=data.frame(dataCarNoInflu[leverageP < leverage_treshold, ])
#Ristimiamo ora il modello privo di valori Influenti e di Leverage Point
model_No_Influ <- lm(((price^teta)/teta)~., data=dataCarNoInfluNoLev)
summary(model_No_Influ)
plot(model_box_selection)
plot(model_box_selection)
plot(model_No_Influ)
library(gvlma)
install.packages('gvlma')
library(gvlma)
gvlma(model_No_Influ)
summary(model_No_Influ)
summary(car_model)
summary(car_model_box)
summary(model_box_selection)
summary(model_No_Influ)
drop1(model_No_Influ, test="F")
names(dataCarNoInfluNoLev)
drop1(model_No_Influ, test="F")
drop1(model_No_Influ, test="F")
names(dataCarNoInfluNoLev)
#dataCarNoInfluNoLev<-dataCarNoInfluNoLev[,-c()]
drop1(model_No_Influ, test="F")
names(dataCarNoInfluNoLev)
dataCarNoInfluNoLev<-dataCarNoInfluNoLev[,-c(6,7,11)]
RobustMod<-lm(((price^teta)/teta)~., data=dataCarNoInfluNoLev)
summary(RobustMod)
drop1(model_No_Influ, test="F")
names(dataCarNoInfluNoLev)
#dataCarNoInfluNoLev<-dataCarNoInfluNoLev[,-c(6,7,11)]
RobustMod<-lm(((price^teta)/teta)~., data=dataCarNoInfluNoLev)
summary(RobustMod)
plot(RobustMod)
summary(RobustMod)
plot(car_model)
plot(RobustMod)
save.image("~/Downloads/final_car_environment.RData")
library(keras)
library(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
library(tidyverse)
library(keras)
library(tidyverse)
library(keras)
library(tidyverse)
setwd("/Users/giannellig/Documents/GitHub/Public-Healt-Analysis")
setwd("/Users/giannellig/Documents/GitHub/Public-Healt-Analysis")
load("~/Documents/GitHub/Public-Healt-Analysis/env.RData")
knitr::opts_chunk$set(echo = TRUE)
set.seed(500)
Sys.setenv(TZ='GMT') # imposto la time zone
packages <- c("dplyr",'epiR','epitools','ggplot2','caret') # librerie
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
View(df_colon)
cont_table <- table(dead = df_colon$dead,
sex = df_colon$sex,
age = df_colon$age)
strat<-epi.2by2(dat=cont_table , method="cohort.count")
library(epiR)
library(epitools)
cont_table <- table(dead = df_colon$dead,
sex = df_colon$sex,
age = df_colon$age)
strat<-epi.2by2(dat=cont_table , method="cohort.count")
model_cox <- coxph(Surv(survtime, I(as.numeric(dead)-1)) ~ relevel(sex, "Male") + geneticm + education + Stadio + smoke + age, data=df_colon)
model_cox_2 <- coxph(Surv(time_d, I(as.numeric(dead)-1)) ~ relevel(sex, "Male") * geneticm + relevel(sex, "Male") * education + relevel(sex, "Male") * Stadio + smoke + age, data=colon)
model_cox <- coxph(Surv(time_d, I(as.numeric(dead)-1)) ~ relevel(sex, "Male") + geneticm + education + Stadio + smoke + age, data=df_colon)
model_cox <- coxph(Surv(time_d, I(as.numeric(dead)-1)) ~ relevel(sex, "Male") + geneticm + education + Stadio + smoke + age, data=df_colon)
df_colon$sex<-as.factor(df_colon$sex)
df_colon$sex<-as.factor(df_colon$sex)
model_cox <- coxph(Surv(time_d, I(as.numeric(dead)-1)) ~ relevel(sex, "Male") + geneticm + education + Stadio + smoke + age, data=df_colon)
summary(model_cox)
model_cox <- coxph(Surv(time_d, I(as.numeric(dead))) ~ relevel(sex, "Male") + geneticm + education + Stadio + smoke + age, data=df_colon)
summary(model_cox)
ph_test <- cox.zph(model_cox)
print(ph_test)
par(mfrow=c(2,1), mar=c(4,5,1,1))
plot(ph_test)
model_cox_2 <- coxph(Surv(time_d, I(as.numeric(dead)-1)) ~ relevel(sex, "Male") * geneticm + relevel(sex, "Male") * education + relevel(sex, "Male") * Stadio + smoke + age, data=df_colon)
summary(model_cox_2)
model_cox_2 <- coxph(Surv(time_d, I(as.numeric(dead))) ~ relevel(sex, "Male") * geneticm + relevel(sex, "Male") * education + relevel(sex, "Male") * Stadio + smoke + age, data=df_colon)
summary(model_cox_2)
df_colon$sex<-as.factor(df_colon$sex)
model_cox <- coxph(Surv(time_d, I(as.numeric(dead))) ~ relevel(sex, "Male") + geneticm  + Stadio + smoke + age, data=df_colon)
summary(model_cox)
ph_test <- cox.zph(model_cox)
print(ph_test)
par(mfrow=c(2,1), mar=c(4,5,1,1))
plot(ph_test)
model_cox_2 <- coxph(Surv(time_d, I(as.numeric(dead))) ~ relevel(sex, "Male") * geneticm + relevel(sex, "Male") * Stadio + smoke + age, data=df_colon)
summary(model_cox_2)
anova(model_cox, model_cox_2, test="LRT")
ph_test_2 <- cox.zph(model_cox_2)
print(ph_test_2)
par(mfrow=c(3,1), mar=c(4,5,1,1), cex.lab = 0.8)
plot(ph_test_2)
save.image("~/Documents/GitHub/Public-Healt-Analysis/env.RData")
fit<-survfit(Surv(time_d, dead) ~Stadio,data=df_colon)
summary(fit)
par(mar=c(4,4,2,2))
# Plot del grafico con colori diversi
plot(fit, xlab = 'Time (days)', ylab = 'Survival probability', col = c('purple', 'blue', 'green', 'orange'))
abline(h=0.5, col = 'red')
# Aggiunta della legenda
legend('bottomleft', legend = levels(df_colon$Stadio), col = c('purple', 'blue', 'green', 'orange'), lty = 1, cex = 0.8)
# Aggiunta del titolo
title('Kaplan Meier estimate by Stadio')
library(survival)
fit<-survfit(Surv(time_d, dead) ~1,data=df_colon)
summary(fit)
par(mar=c(4,4,2,2))
#plot(fit, xlab='time (days)', ylab='survival probability')
#title('Kaplan Meier estimate (pooled data)')
par(mar = c(5, 5, 4, 2) + 0.1, mgp = c(3, 0.8, 0), cex.axis = 0.8)
plot(fit, xlab = "Time (days)", ylab = "Survival probability",
main = "Kaplan-Meier Estimate (Pooled Data)",
lwd = 1.5, col = "darkblue", conf.int = TRUE, conf.int.style = "step",
conf.int.alpha = 0.2, lty.ci = 2, xlim = c(0, 1825), ylim = c(0, 1))
# Add legend
legend("bottomleft", legend = c("Survival probability", "95% Confidence Interval"),
col = c("darkblue", "darkblue"), lty = c(1, 2), lwd = 1.5, cex = 0.8)
# Si calcolano le stime di effetto per maschi e femmine separatamente
effetto_maschi <- predict(model_adj, newdata = data.frame(sex = 'Male', education = df_colon$education))
# Si calcolano le stime di effetto per maschi e femmine separatamente
effetto_maschi <- predict(model_adj, newdata = data.frame(sex = 'Male', education = df_colon$education))
model_adj<-glm(dead~ factor(sex) + factor(education),family=binomial,data=df_colon)
exp(cbind("OR" = coef(model_adj), confint.default(model_adj, level = 0.95)))
model_int<-glm(dead~ factor(sex)*factor(education),family=binomial,data=df_colon)
exp(cbind("OR" = coef(model_int), confint.default(model_int, level = 0.95)))
anova(model_adj, model_int, test = "LRT")
# Si calcolano le stime di effetto per maschi e femmine separatamente
effetto_maschi <- predict(model_adj, newdata = data.frame(sex = 'Male', education = df_colon$education))
effetto_femmine <- predict(model_adj, newdata = data.frame(sex = 'Female', education = df_colon$education))
# Si analizzano le stime di effetto per i diversi livelli di istruzione
effetto_per_istruzione <- aggregate(cbind(effetto_maschi, effetto_femmine), by = list(df_colon$education), FUN = mean)
# Si commenta il tipo di interazione trovato
if (effetto_per_istruzione[1, "effetto_maschi"] > effetto_per_istruzione[nrow(effetto_per_istruzione), "effetto_maschi"]) {
cat("L'effetto di essere maschi sulla mortalità è maggiore tra coloro che hanno un basso livello di istruzione rispetto a coloro che hanno un alto livello di istruzione.\n")
} else if (effetto_per_istruzione[1, "effetto_maschi"] < effetto_per_istruzione[nrow(effetto_per_istruzione), "effetto_maschi"]) {
cat("L'effetto di essere maschi sulla mortalità è minore tra coloro che hanno un basso livello di istruzione rispetto a coloro che hanno un alto livello di istruzione.\n")
} else {
cat("Non si riscontra alcuna differenza significativa nelle stime di effetto tra i diversi livelli di istruzione.\n")
}
#CONFONDIMENTO SI VALUTA ANALIZZANDO RAPPORTO TRA OR GREZZO E OR AGGIUSTATO --> SE VICINO A 1 VARIABILE NON CONFONDENTE
#INTERAZIONE SI VALUTA CON TEST DI OMOGENEITA (SE P-VALUE BASSO C'E INTERAZIONE) O CON TEST ANOVA
model<-glm(dead~sex,family=binomial,data=df_colon)
summary(model)
OR <- exp(model$coefficients)
round(exp(cbind("OR" = coef(model), confint.default(model, level = 0.95))),4)
OR <- exp(model$coefficients)
round(exp(cbind("OR" = coef(model), confint.default(model, level = 0.95))),4)
library(epitools)
cont_table <- table(dead = df_colon$dead,
sex = df_colon$sex,
smoke = df_colon$smoke)
strat<-epi.2by2(dat=cont_table , method="cohort.count")
strat$massoc.detail$OR.strata.wald
strat$massoc.detail$OR.homog.brday
strat
cont_table <- table(dead = df_colon$dead,
sex = df_colon$sex,
married = df_colon$married)
strat<-epi.2by2(dat=cont_table , method="cohort.count")
strat$massoc.detail$OR.strata.wald
strat$massoc.detail$OR.homog.brday
strat
cont_table <- table(dead = df_colon$dead,
sex = df_colon$sex,
kids = df_colon$kids)
strat<-epi.2by2(dat=cont_table , method="cohort.count")
strat$massoc.detail$OR.strata.wald
strat$massoc.detail$OR.homog.brday
strat
library(epitools)
cont_table <- table(dead = df_colon$dead,
sex = df_colon$sex,
smoke = df_colon$smoke)
strat<-epi.2by2(dat=cont_table , method="cohort.count")
strat$massoc.detail$OR.strata.wald
strat$massoc.detail$OR.homog.brday
strat
cont_table <- table(dead = df_colon$dead,
sex = df_colon$sex,
work = df_colon$work)
strat<-epi.2by2(dat=cont_table , method="cohort.count")
strat$massoc.detail$OR.strata.wald
strat$massoc.detail$OR.homog.brday
strat
model_adj<-glm(dead~ factor(sex) + factor(education),family=binomial,data=df_colon)
exp(cbind("OR" = coef(model_adj), confint.default(model_adj, level = 0.95)))
model_int<-glm(dead~ factor(sex)*factor(education),family=binomial,data=df_colon)
exp(cbind("OR" = coef(model_int), confint.default(model_int, level = 0.95)))
anova(model_adj, model_int, test = "LRT")
library(epiR)
library(epitools)
cont_table <- table(dead = df_colon$dead,
sex = df_colon$sex,
age = df_colon$age)
strat<-epi.2by2(dat=cont_table , method="cohort.count")
cont_table <- table(dead = df_colon$dead,
sex = df_colon$sex,
education = df_colon$education)
strat<-epi.2by2(dat=cont_table , method="cohort.count")
strat$massoc.detail$OR.strata.wald
strat$massoc.detail$OR.homog.brday
strat
# Si calcolano le stime di effetto per maschi e femmine separatamente
effetto_maschi <- predict(model_adj, newdata = data.frame(sex = 'Male', education = df_colon$education))
effetto_femmine <- predict(model_adj, newdata = data.frame(sex = 'Female', education = df_colon$education))
# Si analizzano le stime di effetto per i diversi livelli di istruzione
effetto_per_istruzione <- aggregate(cbind(effetto_maschi, effetto_femmine), by = list(df_colon$education), FUN = mean)
# Si commenta il tipo di interazione trovato
if (effetto_per_istruzione[1, "effetto_maschi"] > effetto_per_istruzione[nrow(effetto_per_istruzione), "effetto_maschi"]) {
cat("L'effetto di essere maschi sulla mortalità è maggiore tra coloro che hanno un basso livello di istruzione rispetto a coloro che hanno un alto livello di istruzione.\n")
} else if (effetto_per_istruzione[1, "effetto_maschi"] < effetto_per_istruzione[nrow(effetto_per_istruzione), "effetto_maschi"]) {
cat("L'effetto di essere maschi sulla mortalità è minore tra coloro che hanno un basso livello di istruzione rispetto a coloro che hanno un alto livello di istruzione.\n")
} else {
cat("Non si riscontra alcuna differenza significativa nelle stime di effetto tra i diversi livelli di istruzione.\n")
}
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"],
dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"],
dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
df_colon$education<-as.factor(df_colon$education)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
df_colon$education<-as.factor(df_colon$education)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
df_colon$education<-as.factor(df_colon$education)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, 1)[df_colon$sex=="Male"])
df_colon$sex<-as.factor(df_colon$sex)
model_cox <- coxph(Surv(time_d, I(as.numeric(dead))) ~ relevel(sex, "Male") + geneticm  + Stadio + smoke + age + education, data=df_colon)
summary(model_cox)
ph_test <- cox.zph(model_cox)
print(ph_test)
par(mfrow=c(2,1), mar=c(4,5,1,1))
plot(ph_test)
model_cox_2 <- coxph(Surv(time_d, I(as.numeric(dead))) ~ relevel(sex, "Male") * geneticm + relevel(sex, "Male") * Stadio + relevel(sex, "Male") * education + smoke + age, data=df_colon)
summary(model_cox_2)
anova(model_cox, model_cox_2, test="LRT")
ph_test_2 <- cox.zph(model_cox_2)
print(ph_test_2)
par(mfrow=c(3,1), mar=c(4,5,1,1), cex.lab = 0.8)
plot(ph_test_2)
# Si calcolano le stime di effetto per maschi e femmine separatamente
df_colon$education<-as.factor(df_colon$education)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
# Si calcolano le stime di effetto per maschi e femmine separatamente
df_colon$education<-as.factor(df_colon$education)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
# Si calcolano le stime di effetto per maschi e femmine separatamente
df_colon$education<-as.factor(df_colon$education)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
cont_table_education <- table(sex = df_colon$sex,
dead = relevel(df_colon$dead, "1"),
education = df_colon$education)
set.seed(500)
Sys.setenv(TZ='GMT') # imposto la time zone
packages <- c("dplyr",'epiR','epitools','ggplot2','caret') # librerie
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
# Si calcolano le stime di effetto per maschi e femmine separatamente
df_colon$education<-as.factor(df_colon$education)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
# Si calcolano le stime di effetto per maschi e femmine separatamente
df_colon$education<-as.factor(df_colon$education)
df_colon$dead<-as.factor(df_colon$dead)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
strat_education_male<-epi.2by2(dat=cont_table_education_male, method="cohort.count")
strat_education_male
#cont_table_education_female <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Female"], dead = relevel(df_colon$dead, "1")[colon$sex=="Female"])
#strat_education_female<-epi.2by2(dat=cont_table_education_female, method="cohort.count")
#strat_education_female
strat_education_male
# Si calcolano le stime di effetto per maschi e femmine separatamente
df_colon$education<-as.factor(df_colon$education)
df_colon$dead<-as.factor(df_colon$dead)
cont_table_education <- table(sex = colon$sex,
dead = relevel(colon$dead, "1"),
education = colon$education)
# Si calcolano le stime di effetto per maschi e femmine separatamente
df_colon$education<-as.factor(df_colon$education)
df_colon$dead<-as.factor(df_colon$dead)
cont_table_education <- table(sex = df_colon$sex,
dead = relevel(df_colon$dead, "1"),
education = df_colon$education)
strat_education<-epi.2by2(dat=cont_table_education , method="cohort.count")
strat_education$massoc.detail$RR.strata.wald
strat_education$massoc.detail$OR.strata.wald
strat_education$massoc.detail$wRR.homog
strat_education$massoc.detail$wOR.homog
#cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
#strat_education_male<-epi.2by2(dat=cont_table_education_male, method="cohort.count")
#strat_education_male
#cont_table_education_female <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Female"], dead = relevel(df_colon$dead, "1")[colon$sex=="Female"])
#strat_education_female<-epi.2by2(dat=cont_table_education_female, method="cohort.count")
#strat_education_female
# Si calcolano le stime di effetto per maschi e femmine separatamente
df_colon$education<-as.factor(df_colon$education)
df_colon$dead<-as.factor(df_colon$dead)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
strat_education_male<-epi.2by2(dat=cont_table_education_male, method="cohort.count")
strat_education_male
#cont_table_education_female <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Female"], dead = relevel(df_colon$dead, "1")[colon$sex=="Female"])
#strat_education_female<-epi.2by2(dat=cont_table_education_female, method="cohort.count")
#strat_education_female
# Si calcolano le stime di effetto per maschi e femmine separatamente
df_colon$education<-as.factor(df_colon$education)
df_colon$dead<-as.factor(df_colon$dead)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
strat_education_male<-epi.2by2(dat=cont_table_education_male, method="cohort.count")
strat_education_male
cont_table_education_female <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Female"], dead = relevel(df_colon$dead, "1")[colon$sex=="Female"])
# Si calcolano le stime di effetto per maschi e femmine separatamente
df_colon$education<-as.factor(df_colon$education)
df_colon$dead<-as.factor(df_colon$dead)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
strat_education_male<-epi.2by2(dat=cont_table_education_male, method="cohort.count")
strat_education_male
cont_table_education_female <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Female"], dead = relevel(df_colon$dead, "1")[colon$sex=="Female"])
# Si calcolano le stime di effetto per maschi e femmine separatamente
df_colon$education<-as.factor(df_colon$education)
df_colon$dead<-as.factor(df_colon$dead)
cont_table_education_male <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Male"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Male"])
strat_education_male<-epi.2by2(dat=cont_table_education_male, method="cohort.count")
strat_education_male
cont_table_education_female <- table(education = relevel(df_colon$education, "medium/high")[df_colon$sex=="Female"], dead = relevel(df_colon$dead, "1")[df_colon$sex=="Female"])
strat_education_female<-epi.2by2(dat=cont_table_education_female, method="cohort.count")
strat_education_female
strat_education_female
